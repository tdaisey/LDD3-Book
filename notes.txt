Chapter 1: An Introduction to Device Drivers 

Kernel:  The executable code that handles access to system resources (cpu, memory, network connectivity, etc).  

The kernel’s role can be split into the following parts: 

Process management

Memory management

Filesystems

Device control 
    
    Performed by device drivers 

Networking 

Loadable Modules

    Each piece of code that can be added to the kernel at runtime is called a module. The
Linux kernel offers support for quite a few different types (or classes) of modules,
including, but not limited to, device drivers. 

So a device driver is a type of loadable module.

Each module is made up of object code
(not linked into a complete executable) that can be dynamically linked to the running
kernel by the insmod program and can be unlinked by the rmmod program.

Three fundamental types of device/modules:

    Character device/module 

        A device that can be accessed as a stream of bytes (like a file). 

        The driver usually implements at least open, read, write, close calls. 

        The device is typically accessed via a filesystem node (ie. /dev/tty1).  

Note: The only relevant difference between a char device and a regular file is that you can always move back and forth in the regular file, whereas most char devices are just data channels, which you can only access sequentially. There exist, nonetheless, char devices that look like data areas, and you can move back and forth in them; for instance, this usually applies to frame grabbers, where the applications can access the whole acquired image using mmap or lseek.

    Block device/module

        Accessed by filesystem nodes in the /dev directory.

A device (e.g., a disk) that can host a filesystem.

A block device can only handle I/O operations that transfer one or more whole blocks, which are usually 512 bytes (or a larger power of two) bytes in length.  However, Linux, instead, allows the application to read and write a block device like a char device—it permits the transfer of any number of bytes at a time. As a result, block and char devices differ only in the way data is managed internally by the kernel, and thus in the kernel/driver software interface. Like a char device, each block device is accessed through a filesystem node, and the difference between them is transparent to the user. Block drivers have a completely different interface to the kernel than char drivers.

Network device/module

A network interface is in charge of sending and receiving data packets, driven by the network subsystem of the kernel.  Not being a stream-oriented device, a network interface isn’t easily mapped to a
node in the filesystem, as /dev/tty1 is. The Unix way to provide access to interfaces is still by assigning a unique name to them (such as eth0), but that name doesn’t have a corresponding entry in the filesystem. Communication between the kernel and a network device driver is completely different from that used with char and block drivers. Instead of read and write, the kernel calls functions related to packet transmission.

Chapter 2: Building and Running Modules 

module_init is a kernel macro that defines what device driver function should be called when the module is loaded into the kernel.  

module_exit is a kernel macro that defines what device driver function should be called when the module is unloaded from the kernel.

MODULE_LICENSE is a kernel macro that tells the kernel what type of license the module bears. 
